diff -up Twisted-18.4.0/src/twisted/conch/manhole.py.omv~ Twisted-18.4.0/src/twisted/conch/manhole.py
--- Twisted-18.4.0/src/twisted/conch/manhole.py.omv~	2018-06-13 12:32:27.087691467 +0200
+++ Twisted-18.4.0/src/twisted/conch/manhole.py	2018-06-13 12:32:38.226692078 +0200
@@ -151,8 +151,8 @@ class ManholeInterpreter(code.Interactiv
         return failure
 
 
-    def write(self, data, async=False):
-        self.handler.addOutput(data, async)
+    def write(self, data, asynch=False):
+        self.handler.addOutput(data, asynch)
 
 
 
@@ -237,14 +237,14 @@ class Manhole(recvline.HistoricRecvLine)
         return not w.endswith(b'\n') and not w.endswith(b'\x1bE')
 
 
-    def addOutput(self, data, async=False):
-        if async:
+    def addOutput(self, data, asynch=False):
+        if asynch:
             self.terminal.eraseLine()
             self.terminal.cursorBackward(len(self.lineBuffer) + len(self.ps[self.pn]))
 
         self.terminal.write(data)
 
-        if async:
+        if asynch:
             if self._needsNewline():
                 self.terminal.nextLine()
 
diff -up Twisted-18.4.0/src/twisted/mail/imap4.py.omv~ Twisted-18.4.0/src/twisted/mail/imap4.py
--- Twisted-18.4.0/src/twisted/mail/imap4.py.omv~	2018-06-13 12:26:21.288671430 +0200
+++ Twisted-18.4.0/src/twisted/mail/imap4.py	2018-06-13 12:26:45.965672782 +0200
@@ -1090,8 +1090,8 @@ class IMAP4Server(basic.LineReceiver, po
         self._respond(b'NO', tag, message)
 
 
-    def sendUntaggedResponse(self, message, async=False):
-        if not async or (self.blocked is None):
+    def sendUntaggedResponse(self, message, asynch=False):
+        if not asynch or (self.blocked is None):
             self._respond(message, None, None)
         else:
             self._queuedAsync.append(message)
@@ -2497,9 +2497,9 @@ class IMAP4Server(basic.LineReceiver, po
     #
     def modeChanged(self, writeable):
         if writeable:
-            self.sendUntaggedResponse(message=b'[READ-WRITE]', async=True)
+            self.sendUntaggedResponse(message=b'[READ-WRITE]', asynch=True)
         else:
-            self.sendUntaggedResponse(message=b'[READ-ONLY]', async=True)
+            self.sendUntaggedResponse(message=b'[READ-ONLY]', asynch=True)
 
 
     def flagsChanged(self, newFlags):
@@ -2508,14 +2508,14 @@ class IMAP4Server(basic.LineReceiver, po
             msg = intToBytes(mId) + (
                 b' FETCH (FLAGS (' +b' '.join(encodedFlags) + b'))'
             )
-            self.sendUntaggedResponse(msg, async=True)
+            self.sendUntaggedResponse(msg, asynch=True)
 
 
     def newMessages(self, exists, recent):
         if exists is not None:
-            self.sendUntaggedResponse(intToBytes(exists) + b' EXISTS', async=True)
+            self.sendUntaggedResponse(intToBytes(exists) + b' EXISTS', asynch=True)
         if recent is not None:
-            self.sendUntaggedResponse(intToBytes(recent) + b' RECENT', async=True)
+            self.sendUntaggedResponse(intToBytes(recent) + b' RECENT', asynch=True)
 
 
 TIMEOUT_ERROR = error.TimeoutError()
