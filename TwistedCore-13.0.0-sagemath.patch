--- Twisted-17.1.0/src/twisted/application/internet.py.omv~	2017-04-23 18:43:55.250468792 +0200
+++ Twisted-17.1.0/src/twisted/application/internet.py	2017-04-23 18:44:22.471734772 +0200
@@ -214,7 +214,7 @@ on arguments to the reactor method.
 """,
 }
 
-for tran in 'TCP UNIX SSL UDP UNIXDatagram Multicast'.split():
+for tran in 'TCP UNIX SSL TLS UDP UNIXDatagram Multicast'.split():
     for side in 'Server Client'.split():
         if tran == "Multicast" and side == "Client":
             continue
@@ -1005,5 +1005,5 @@ __all__ = (['TimerService', 'CooperatorS
             'StreamServerEndpointService', 'UDPServer',
             'ClientService'] +
            [tran + side
-            for tran in 'TCP UNIX SSL UNIXDatagram'.split()
+            for tran in 'TCP UNIX SSL TLS UNIXDatagram'.split()
             for side in 'Server Client'.split()])
--- Twisted-17.1.0/src/twisted/internet/endpoints.py.omv~	2017-04-23 18:44:34.433851196 +0200
+++ Twisted-17.1.0/src/twisted/internet/endpoints.py	2017-04-23 18:45:32.743414940 +0200
@@ -1253,6 +1253,21 @@ def _parseSSL(factory, port, privateKey=
             {'interface': interface, 'backlog': int(backlog)})
 
 
+def _parseTLS(factory, port, privateKey='server.pem', certKey=None,
+              sslmethod=None, interface='', backlog=50):
+    from gnutls.interfaces.twisted import X509Credentials
+    from gnutls.crypto import X509Certificate, X509PrivateKey
+
+    if certKey is None:
+        certKey = privateKey
+
+    cert = X509Certificate(open(certKey).read())
+    key = X509PrivateKey(open(privateKey).read())
+    cf = X509Credentials(cert, key)
+
+    return ((int(port), factory, cf),
+            {'interface': interface, 'backlog': int(backlog)})
+
 
 @implementer(IPlugin, IStreamServerEndpointStringParser)
 class _StandardIOParser(object):
@@ -1370,6 +1385,7 @@ class _TCP6ServerParser(object):
 _serverParsers = {"tcp": _parseTCP,
                   "unix": _parseUNIX,
                   "ssl": _parseSSL,
+                  "tls": _parseTLS
                   }
 
 _OP, _STRING = range(2)
